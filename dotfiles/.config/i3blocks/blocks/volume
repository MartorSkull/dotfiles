#!/bin/bash
# Displays the default device, volume, and mute status for i3blocks

set -a

IGNORED_SINKS=${IGNORED_SINKS:-"easyeffects_sink"}

AUDIO_HIGH_SYMBOL=${AUDIO_HIGH_SYMBOL:-'  '}

AUDIO_MED_THRESH=${AUDIO_MED_THRESH:-50}
AUDIO_MED_SYMBOL=${AUDIO_MED_SYMBOL:-'  '}

AUDIO_LOW_THRESH=${AUDIO_LOW_THRESH:-0}
AUDIO_LOW_SYMBOL=${AUDIO_LOW_SYMBOL:-'  '}

AUDIO_MUTED_SYMBOL=${AUDIO_MUTED_SYMBOL:-'  '}

AUDIO_DELTA=${AUDIO_DELTA:-5}

DEFAULT_COLOR=${DEFAULT_COLOR:-"#ffffff"}
MUTED_COLOR=${MUTED_COLOR:-"#a0a0a0"}

LONG_FORMAT=${LONG_FORMAT:-'${SYMB} ${VOL}% [${DISPLAY_NAME}]'}
SHORT_FORMAT=${SHORT_FORMAT:-'${SYMB} ${VOL}% [${DISPLAY_NAME}]'}

NAME_PRIORITY=${NAME_PRIORITY:-"DEVICE_DESCRIPTION" "DEVICE_PROFILE_DESCRIPTION" "ALSA_MIXER" "ALSA_NAME" "DESCRIPTION" "NAME"}

SUBSCRIBE=${SUBSCRIBE:-0}

MIXER=${MIXER:-""}
SCONTROL=${SCONTROL:-""}

while getopts F:Sf:H:M:L:X:T:t:C:c:i:m:s:h opt; do
    case "$opt" in
        S) SUBSCRIBE=1 ;;
        F) LONG_FORMAT="$OPTARG" ;;
        f) SHORT_FORMAT="$OPTARG" ;;
        H) AUDIO_HIGH_SYMBOL="$OPTARG" ;;
        M) AUDIO_MED_SYMBOL="$OPTARG" ;;
        L) AUDIO_LOW_SYMBOL="$OPTARG" ;;
        X) AUDIO_MUTED_SYMBOL="$OPTARG" ;;
        T) AUDIO_MED_THRESH="$OPTARG" ;;
        t) AUDIO_LOW_THRESH="$OPTARG" ;;
        C) DEFAULT_COLOR="$OPTARG" ;;
        c) MUTED_COLOR="$OPTARG" ;;
        i) AUDIO_INTERVAL="$OPTARG" ;;
        m) MIXER="$OPTARG" ;;
        s) SCONTROL="$OPTARG" ;;
        h) printf \
"Usage: volume-pulseaudio [-S] [-F format] [-f format] [-p] [-a|-d] [-H symb] [-M symb]
        [-L symb] [-X symb] [-T thresh] [-t thresh] [-C color] [-c color] [-i inter] 
        [-m mixer] [-s scontrol] [-h]
Options:
-F, -f\tOutput format (-F long format, -f short format) to use, with exposed variables:
\${SYMB}, \${VOL}, \${DISPLAY_NAME}
-S\tSubscribe to volume events (requires persistent block, always uses long format)
-H\tSymbol to use when audio level is high. Default: '$AUDIO_HIGH_SYMBOL'
-M\tSymbol to use when audio level is medium. Default: '$AUDIO_MED_SYMBOL'
-L\tSymbol to use when audio level is low. Default: '$AUDIO_LOW_SYMBOL'
-X\tSymbol to use when audio is muted. Default: '$AUDIO_MUTED_SYMBOL'
-T\tThreshold for medium audio level. Default: $AUDIO_MED_THRESH
-t\tThreshold for low audio level. Default: $AUDIO_LOW_THRESH
-C\tColor for non-muted audio. Default: $DEFAULT_COLOR
-c\tColor for muted audio. Default: $MUTED_COLOR
-i\tInterval size of volume increase/decrease. Default: $AUDIO_DELTA
-m\tUse the given mixer.
-s\tUse the given scontrol.
-h\tShow this help text

Environment variables:
IGNORED_SINKS: specify a space-separated list of sink names to ignore.
    default: '$IGNORED_SINKS'
NAME_PRIORITY: specify a space-separated list of variable names to use for display name, in order of priority.
    default: '$NAME_PRIORITY'
LOG: if set to any value, will log debug info to stderr.
" && exit 0;;
    esac
done

if [[ -z "$MIXER" ]] ; then
    MIXER="default"
    if amixer -D pulse info >/dev/null 2>&1 ; then
        MIXER="pulse"
    fi
fi

if [[ -z "$SCONTROL" ]] ; then
    SCONTROL=$(amixer -D "$MIXER" scontrols | sed -n "s/Simple mixer control '\([^']*\)',0/\1/p" | head -n1)
fi

CAPABILITY=$(amixer -D $MIXER get $SCONTROL | sed -n "s/  Capabilities:.*cvolume.*/Capture/p")


function move_sinks_to_new_default {
    DEFAULT_SINK=$1
    pactl list sink-inputs | grep 'Sink Input #' | grep -o '[0-9]\+' | while read SINK
    do
        pactl move-sink-input $SINK $DEFAULT_SINK
    done
}

function set_default_playback_device_next {
    inc=${1:-1}
    sink_arr=($(pactl list sinks | grep "Name: \|type: " | tr '\n' ' ' | sed -r 's/\s+Name: /\n/g' | grep "availability unknown\|, available" | awk NF=1 FS='\t'))
    num_devices=${#sink_arr[@]}
    default_sink=$(pactl get-default-sink)
    default_sink_index=$(for i in "${!sink_arr[@]}"; do if [[ "$default_sink" = "${sink_arr[$i]}" ]]; then echo "$i"; fi done)
    default_sink_index=$(( ($default_sink_index + $num_devices + $inc) % $num_devices ))
    default_sink=${sink_arr[$default_sink_index]}
    pactl set-default-sink $default_sink
    if [[ $(pactl get-default-sink) == $default_sink ]] ; then
        move_sinks_to_new_default $default_sink
    fi
}

function read_active_output {
    NAME=$(echo "$1" | grep "Name:" | sed 's/[[:space:]]*Name:[[:space:]]*//g')

    VOL=$(echo "$1" | grep -o "[0-9]*%" | head -1 )
    VOL="${VOL%?}"

    MUTED=$(echo "$1" | grep "Mute:" | sed 's/[[:space:]]*Mute:[[:space:]]*//g')

    DESCRIPTION=$(echo "$1" | grep "Description:" | sed 's/^.*: //')

    ALSA_NAME=$(echo "$1" | grep "alsa.name" | sed 's/.*= "\(.*\)".*/\1/')
    ALSA_MIXER=$(echo "$1" | grep "alsa.mixer_name" | sed 's/.*= "\(.*\)".*/\1/')

    DEVICE_DESCRIPTION=$(echo "$1" | grep "device.description" | sed 's/.*= "\(.*\)".*/\1/')
    DEVICE_PROFILE_DESCRIPTION=$(echo "$1" | grep "device.profile.description" | sed 's/.*= "\(.*\)".*/\1/')

}

case "$BLOCK_BUTTON" in
    1) set_default_playback_device_next ;;
    2) amixer -q -D $MIXER sset $SCONTROL $CAPABILITY toggle ;;
    3) set_default_playback_device_next -1 ;;
    4) amixer -q -D $MIXER sset $SCONTROL $CAPABILITY $AUDIO_DELTA%+ ;;
    5) amixer -q -D $MIXER sset $SCONTROL $CAPABILITY $AUDIO_DELTA%- ;;
esac

function print_format {
    echo "$1" | envsubst '${SYMB}${VOL}${DISPLAY_NAME}'
}

function print_block {
    ACTIVE=$(pactl list sinks)
    while
        BLOCK=$(echo "$ACTIVE" | awk '/Sink /{count++; if(count==2) exit} {print}')
        ACTIVE=$(echo "$ACTIVE" | tail -n +$(($(echo "$BLOCK" | wc -l)+1)))
        if [[ -n $(echo "$BLOCK" | grep "State: RUNNING") ]]; then
            read_active_output "$BLOCK"
        fi
        [[ -n $BLOCK ]] && ([[ -z $NAME ]] || [[ " ${IGNORED_SINKS[@]} " =~ " $NAME " ]])
    do true; done

    if [[ -n "$LOG" ]]; then
        echo NAME=$NAME 1>&2
        echo VOL=$VOL 1>&2
        echo MUTED=$MUTED 1>&2
        echo DESCRIPTION=$DESCRIPTION 1>&2
        echo ALSA_NAME=$ALSA_NAME 1>&2
        echo ALSA_MIXER=$ALSA_MIXER 1>&2
        echo DEVICE_DESCRIPTION=$DEVICE_DESCRIPTION 1>&2
        echo DEVICE_PROFILE_DESCRIPTION=$DEVICE_PROFILE_DESCRIPTION 1>&2
        echo "" 1>&2
    fi

    if [[ $MUTED =~ "no" ]] ; then
        SYMB=$AUDIO_HIGH_SYMBOL
        [[ $VOL -le $AUDIO_MED_THRESH ]] && SYMB=$AUDIO_MED_SYMBOL
        [[ $VOL -le $AUDIO_LOW_THRESH ]] && SYMB=$AUDIO_LOW_SYMBOL
        COLOR=$DEFAULT_COLOR
    else
        SYMB=$AUDIO_MUTED_SYMBOL
        COLOR=$MUTED_COLOR
    fi

    for KEY in ${NAME_PRIORITY[@]} ; do
        DISPLAY_NAME=${!KEY}
        if [[ -n $DISPLAY_NAME ]] ; then
            break
        fi
    done

    if [[ $BLOCK = "" ]] ; then
        echo "Sound inactive"
        COLOR='#222225'
    fi

    if [[ $SUBSCRIBE == 1 ]] ; then
        print_format "$LONG_FORMAT"
    else
        print_format "$LONG_FORMAT"
        print_format "$SHORT_FORMAT"
        echo "$COLOR"
    fi
}

print_block
if [[ $SUBSCRIBE == 1 ]] ; then
    while read -r EVENT; do
        print_block
    done < <(pactl subscribe | stdbuf -oL grep change)
fi
